{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","inputText","setInputText","text","setText","error","message","inputTextError","setInputTextError","className","TextField","placeholder","variant","label","size","value","onChange","e","target","helperText","Button","color","style","marginLeft","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAgEeA,MA5Df,WACE,IAKA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,wFAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4CJ,mBAPvB,CACnBK,OAAO,EACPC,QAAS,KAKX,mBAAOC,EAAP,KAAuBC,EAAvB,KAsBA,OACE,sBAAKC,UAAU,MAAf,UACE,6DAGA,4BACGN,IAEH,cAACO,EAAA,EAAD,CACEC,YAAY,6CACZC,QAAQ,WACRC,MAAM,YACNC,KAAK,QACLC,MAAOd,EACPe,SAlCmB,SAAAC,GACvBf,EAAae,EAAEC,OAAOH,QAkClBV,MAAOE,EAAeF,MACtBc,WAAYZ,EAAeD,UAE7B,cAACc,EAAA,EAAD,CACER,QAAQ,YACRS,MAAM,UACNC,MAAO,CAAEC,WAAY,OACrBC,QAtCgB,WACF,KAAdvB,GAQJO,EAAkB,CAChBH,OAAO,EACPC,QAAS,KAEXF,EAAQH,IAXNO,EAAkB,CAChBH,OAAO,EACPC,QAAS,oFA8BX,8BCxCSmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f0aeffcb.chunk.js","sourcesContent":["import { Button, TextField } from '@material-ui/core';\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const initialError = {\n    error: false,\n    message: ''\n  };\n\n  const [inputText, setInputText] = useState('');\n  const [text, setText] = useState('ここにテキストが表示されます');\n  const [inputTextError, setInputTextError] = useState(initialError);\n\n  const inputTextChanged = e => {\n    setInputText(e.target.value);\n  }\n\n  const buttonClicked = () => {\n    if (inputText === '') {\n      setInputTextError({\n        error: true,\n        message: 'テキストを入力してください'\n      });\n      return;\n    }\n\n    setInputTextError({\n      error: false,\n      message: ''\n    });\n    setText(inputText);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        GitHub Pages with React App\n      </h1>\n      <p>\n        {text}\n      </p>\n      <TextField\n        placeholder='テキストを入力'\n        variant='outlined'\n        label='TextField'\n        size='small'\n        value={inputText}\n        onChange={inputTextChanged}\n        error={inputTextError.error}\n        helperText={inputTextError.message}\n      />\n      <Button\n        variant='contained'\n        color='primary'\n        style={{ marginLeft: '1em' }}\n        onClick={buttonClicked}\n      >\n        完了\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}